{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","state","inputValue","displaySend","sent","handleClick","_this","setState","handleSend","handleReset","_this$state","this","react_default","a","createElement","className","concat","onChange","onClick","value","index_esm","io_index_esm","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAKqBA,6MAEnBC,MAAQ,CACNC,WAAY,mBACZC,aAAa,EACbC,MAAM,KAGRC,YAAc,WACPC,EAAKL,MAAME,aACdG,EAAKC,SAAS,CACZL,WAAY,mBACZC,aAAa,OAKnBK,WAAa,WACNF,EAAKL,MAAMG,MACdE,EAAKC,SAAS,CACZH,MAAM,OAKZK,YAAc,WACZH,EAAKC,SAAS,CACZH,MAAM,EACND,aAAa,6EAIR,IAAAO,EACmCC,KAAKV,MAAvCG,EADDM,EACCN,KAAMF,EADPQ,EACOR,WAAYC,EADnBO,EACmBP,YAC1B,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,+BAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,kJAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAS,mBAAAC,OAAqBZ,EAAO,OAAS,SACjDQ,EAAAC,EAAAC,cAAA,SAAOG,SAAU,aAASC,QAASP,KAAKN,YAAac,MAAOjB,IAC5DU,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAuBF,QAASP,KAAKH,WAAYO,UAAS,QAAAC,OAAUb,EAAcC,EAAO,OAAS,OAAS,SAAYA,EAAO,0BAA4B,KAE5JQ,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAcH,QAASP,KAAKF,YAAYM,UAAS,UAAAC,OAAYZ,EAAO,OAAS,cA/CpDkB,aCObC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e2281504.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.scss'\nimport { TiChevronRightOutline } from 'react-icons/ti'\nimport { IoIosRefresh } from 'react-icons/io'\n\nexport default class App extends Component {\n\n  state = {\n    inputValue: 'Enter Your Email',\n    displaySend: false,\n    sent: false\n  }\n\n  handleClick = () => {\n    if (!this.state.displaySend) {\n      this.setState({\n        inputValue: 'person@email.com',\n        displaySend: true\n      })\n    }\n  }\n\n  handleSend = () => {\n    if (!this.state.sent) {\n      this.setState({\n        sent: true\n      })\n    }\n  }\n\n  handleReset = () => {\n    this.setState({\n      sent: false,\n      displaySend: false\n    })\n  }\n\n  render() {\n    const { sent, inputValue, displaySend } = this.state\n    return (\n      <div className=\"app\">\n        <div className=\"header\">\n          <span>Sign Up For</span>\n          <span>Our Newsletter</span>\n        </div>\n        <div className=\"subtext\">\n          <span>And recieve lastest news about our blog posts, podcasts, and job opportunities. We send emails twice a week. No spam, we promise!</span>\n        </div>\n        <div className={`input-container ${sent ? 'sent' : 'exit'}`}>\n          <input onChange={() => {}}onClick={this.handleClick} value={inputValue} />\n          <TiChevronRightOutline onClick={this.handleSend} className={`icon ${displaySend ? sent ? 'sent' : 'show' : 'exit'}`} >{sent ? 'Your Email Was Received' : ''}</TiChevronRightOutline>\n        </div>\n        <IoIosRefresh onClick={this.handleReset}className={`repeat ${sent ? 'sent' : ''}`}/>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}